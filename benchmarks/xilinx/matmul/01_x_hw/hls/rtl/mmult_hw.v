// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2_AR72614
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_hw,hls_ip_2019_2_AR72614,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.827500,HLS_SYN_LAT=270536710,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=2076,HLS_SYN_LUT=2375,HLS_VERSION=2019_2_AR72614}" *)

module mmult_hw (
        ap_clk,
        ap_rst_n,
        m_axi_port_in1_AWVALID,
        m_axi_port_in1_AWREADY,
        m_axi_port_in1_AWADDR,
        m_axi_port_in1_AWID,
        m_axi_port_in1_AWLEN,
        m_axi_port_in1_AWSIZE,
        m_axi_port_in1_AWBURST,
        m_axi_port_in1_AWLOCK,
        m_axi_port_in1_AWCACHE,
        m_axi_port_in1_AWPROT,
        m_axi_port_in1_AWQOS,
        m_axi_port_in1_AWREGION,
        m_axi_port_in1_AWUSER,
        m_axi_port_in1_WVALID,
        m_axi_port_in1_WREADY,
        m_axi_port_in1_WDATA,
        m_axi_port_in1_WSTRB,
        m_axi_port_in1_WLAST,
        m_axi_port_in1_WID,
        m_axi_port_in1_WUSER,
        m_axi_port_in1_ARVALID,
        m_axi_port_in1_ARREADY,
        m_axi_port_in1_ARADDR,
        m_axi_port_in1_ARID,
        m_axi_port_in1_ARLEN,
        m_axi_port_in1_ARSIZE,
        m_axi_port_in1_ARBURST,
        m_axi_port_in1_ARLOCK,
        m_axi_port_in1_ARCACHE,
        m_axi_port_in1_ARPROT,
        m_axi_port_in1_ARQOS,
        m_axi_port_in1_ARREGION,
        m_axi_port_in1_ARUSER,
        m_axi_port_in1_RVALID,
        m_axi_port_in1_RREADY,
        m_axi_port_in1_RDATA,
        m_axi_port_in1_RLAST,
        m_axi_port_in1_RID,
        m_axi_port_in1_RUSER,
        m_axi_port_in1_RRESP,
        m_axi_port_in1_BVALID,
        m_axi_port_in1_BREADY,
        m_axi_port_in1_BRESP,
        m_axi_port_in1_BID,
        m_axi_port_in1_BUSER,
        m_axi_port_in2_AWVALID,
        m_axi_port_in2_AWREADY,
        m_axi_port_in2_AWADDR,
        m_axi_port_in2_AWID,
        m_axi_port_in2_AWLEN,
        m_axi_port_in2_AWSIZE,
        m_axi_port_in2_AWBURST,
        m_axi_port_in2_AWLOCK,
        m_axi_port_in2_AWCACHE,
        m_axi_port_in2_AWPROT,
        m_axi_port_in2_AWQOS,
        m_axi_port_in2_AWREGION,
        m_axi_port_in2_AWUSER,
        m_axi_port_in2_WVALID,
        m_axi_port_in2_WREADY,
        m_axi_port_in2_WDATA,
        m_axi_port_in2_WSTRB,
        m_axi_port_in2_WLAST,
        m_axi_port_in2_WID,
        m_axi_port_in2_WUSER,
        m_axi_port_in2_ARVALID,
        m_axi_port_in2_ARREADY,
        m_axi_port_in2_ARADDR,
        m_axi_port_in2_ARID,
        m_axi_port_in2_ARLEN,
        m_axi_port_in2_ARSIZE,
        m_axi_port_in2_ARBURST,
        m_axi_port_in2_ARLOCK,
        m_axi_port_in2_ARCACHE,
        m_axi_port_in2_ARPROT,
        m_axi_port_in2_ARQOS,
        m_axi_port_in2_ARREGION,
        m_axi_port_in2_ARUSER,
        m_axi_port_in2_RVALID,
        m_axi_port_in2_RREADY,
        m_axi_port_in2_RDATA,
        m_axi_port_in2_RLAST,
        m_axi_port_in2_RID,
        m_axi_port_in2_RUSER,
        m_axi_port_in2_RRESP,
        m_axi_port_in2_BVALID,
        m_axi_port_in2_BREADY,
        m_axi_port_in2_BRESP,
        m_axi_port_in2_BID,
        m_axi_port_in2_BUSER,
        m_axi_port_out_AWVALID,
        m_axi_port_out_AWREADY,
        m_axi_port_out_AWADDR,
        m_axi_port_out_AWID,
        m_axi_port_out_AWLEN,
        m_axi_port_out_AWSIZE,
        m_axi_port_out_AWBURST,
        m_axi_port_out_AWLOCK,
        m_axi_port_out_AWCACHE,
        m_axi_port_out_AWPROT,
        m_axi_port_out_AWQOS,
        m_axi_port_out_AWREGION,
        m_axi_port_out_AWUSER,
        m_axi_port_out_WVALID,
        m_axi_port_out_WREADY,
        m_axi_port_out_WDATA,
        m_axi_port_out_WSTRB,
        m_axi_port_out_WLAST,
        m_axi_port_out_WID,
        m_axi_port_out_WUSER,
        m_axi_port_out_ARVALID,
        m_axi_port_out_ARREADY,
        m_axi_port_out_ARADDR,
        m_axi_port_out_ARID,
        m_axi_port_out_ARLEN,
        m_axi_port_out_ARSIZE,
        m_axi_port_out_ARBURST,
        m_axi_port_out_ARLOCK,
        m_axi_port_out_ARCACHE,
        m_axi_port_out_ARPROT,
        m_axi_port_out_ARQOS,
        m_axi_port_out_ARREGION,
        m_axi_port_out_ARUSER,
        m_axi_port_out_RVALID,
        m_axi_port_out_RREADY,
        m_axi_port_out_RDATA,
        m_axi_port_out_RLAST,
        m_axi_port_out_RID,
        m_axi_port_out_RUSER,
        m_axi_port_out_RRESP,
        m_axi_port_out_BVALID,
        m_axi_port_out_BREADY,
        m_axi_port_out_BRESP,
        m_axi_port_out_BID,
        m_axi_port_out_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_PORT_IN1_ID_WIDTH = 1;
parameter    C_M_AXI_PORT_IN1_ADDR_WIDTH = 32;
parameter    C_M_AXI_PORT_IN1_DATA_WIDTH = 32;
parameter    C_M_AXI_PORT_IN1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN1_WUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN1_RUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN1_BUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN1_USER_VALUE = 0;
parameter    C_M_AXI_PORT_IN1_PROT_VALUE = 0;
parameter    C_M_AXI_PORT_IN1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_PORT_IN2_ID_WIDTH = 1;
parameter    C_M_AXI_PORT_IN2_ADDR_WIDTH = 32;
parameter    C_M_AXI_PORT_IN2_DATA_WIDTH = 32;
parameter    C_M_AXI_PORT_IN2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN2_WUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN2_RUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN2_BUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_IN2_USER_VALUE = 0;
parameter    C_M_AXI_PORT_IN2_PROT_VALUE = 0;
parameter    C_M_AXI_PORT_IN2_CACHE_VALUE = 3;
parameter    C_M_AXI_PORT_OUT_ID_WIDTH = 1;
parameter    C_M_AXI_PORT_OUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_PORT_OUT_DATA_WIDTH = 32;
parameter    C_M_AXI_PORT_OUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_OUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_OUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_OUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_OUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_OUT_USER_VALUE = 0;
parameter    C_M_AXI_PORT_OUT_PROT_VALUE = 0;
parameter    C_M_AXI_PORT_OUT_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_PORT_IN1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_PORT_IN2_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_PORT_OUT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_port_in1_AWVALID;
input   m_axi_port_in1_AWREADY;
output  [C_M_AXI_PORT_IN1_ADDR_WIDTH - 1:0] m_axi_port_in1_AWADDR;
output  [C_M_AXI_PORT_IN1_ID_WIDTH - 1:0] m_axi_port_in1_AWID;
output  [7:0] m_axi_port_in1_AWLEN;
output  [2:0] m_axi_port_in1_AWSIZE;
output  [1:0] m_axi_port_in1_AWBURST;
output  [1:0] m_axi_port_in1_AWLOCK;
output  [3:0] m_axi_port_in1_AWCACHE;
output  [2:0] m_axi_port_in1_AWPROT;
output  [3:0] m_axi_port_in1_AWQOS;
output  [3:0] m_axi_port_in1_AWREGION;
output  [C_M_AXI_PORT_IN1_AWUSER_WIDTH - 1:0] m_axi_port_in1_AWUSER;
output   m_axi_port_in1_WVALID;
input   m_axi_port_in1_WREADY;
output  [C_M_AXI_PORT_IN1_DATA_WIDTH - 1:0] m_axi_port_in1_WDATA;
output  [C_M_AXI_PORT_IN1_WSTRB_WIDTH - 1:0] m_axi_port_in1_WSTRB;
output   m_axi_port_in1_WLAST;
output  [C_M_AXI_PORT_IN1_ID_WIDTH - 1:0] m_axi_port_in1_WID;
output  [C_M_AXI_PORT_IN1_WUSER_WIDTH - 1:0] m_axi_port_in1_WUSER;
output   m_axi_port_in1_ARVALID;
input   m_axi_port_in1_ARREADY;
output  [C_M_AXI_PORT_IN1_ADDR_WIDTH - 1:0] m_axi_port_in1_ARADDR;
output  [C_M_AXI_PORT_IN1_ID_WIDTH - 1:0] m_axi_port_in1_ARID;
output  [7:0] m_axi_port_in1_ARLEN;
output  [2:0] m_axi_port_in1_ARSIZE;
output  [1:0] m_axi_port_in1_ARBURST;
output  [1:0] m_axi_port_in1_ARLOCK;
output  [3:0] m_axi_port_in1_ARCACHE;
output  [2:0] m_axi_port_in1_ARPROT;
output  [3:0] m_axi_port_in1_ARQOS;
output  [3:0] m_axi_port_in1_ARREGION;
output  [C_M_AXI_PORT_IN1_ARUSER_WIDTH - 1:0] m_axi_port_in1_ARUSER;
input   m_axi_port_in1_RVALID;
output   m_axi_port_in1_RREADY;
input  [C_M_AXI_PORT_IN1_DATA_WIDTH - 1:0] m_axi_port_in1_RDATA;
input   m_axi_port_in1_RLAST;
input  [C_M_AXI_PORT_IN1_ID_WIDTH - 1:0] m_axi_port_in1_RID;
input  [C_M_AXI_PORT_IN1_RUSER_WIDTH - 1:0] m_axi_port_in1_RUSER;
input  [1:0] m_axi_port_in1_RRESP;
input   m_axi_port_in1_BVALID;
output   m_axi_port_in1_BREADY;
input  [1:0] m_axi_port_in1_BRESP;
input  [C_M_AXI_PORT_IN1_ID_WIDTH - 1:0] m_axi_port_in1_BID;
input  [C_M_AXI_PORT_IN1_BUSER_WIDTH - 1:0] m_axi_port_in1_BUSER;
output   m_axi_port_in2_AWVALID;
input   m_axi_port_in2_AWREADY;
output  [C_M_AXI_PORT_IN2_ADDR_WIDTH - 1:0] m_axi_port_in2_AWADDR;
output  [C_M_AXI_PORT_IN2_ID_WIDTH - 1:0] m_axi_port_in2_AWID;
output  [7:0] m_axi_port_in2_AWLEN;
output  [2:0] m_axi_port_in2_AWSIZE;
output  [1:0] m_axi_port_in2_AWBURST;
output  [1:0] m_axi_port_in2_AWLOCK;
output  [3:0] m_axi_port_in2_AWCACHE;
output  [2:0] m_axi_port_in2_AWPROT;
output  [3:0] m_axi_port_in2_AWQOS;
output  [3:0] m_axi_port_in2_AWREGION;
output  [C_M_AXI_PORT_IN2_AWUSER_WIDTH - 1:0] m_axi_port_in2_AWUSER;
output   m_axi_port_in2_WVALID;
input   m_axi_port_in2_WREADY;
output  [C_M_AXI_PORT_IN2_DATA_WIDTH - 1:0] m_axi_port_in2_WDATA;
output  [C_M_AXI_PORT_IN2_WSTRB_WIDTH - 1:0] m_axi_port_in2_WSTRB;
output   m_axi_port_in2_WLAST;
output  [C_M_AXI_PORT_IN2_ID_WIDTH - 1:0] m_axi_port_in2_WID;
output  [C_M_AXI_PORT_IN2_WUSER_WIDTH - 1:0] m_axi_port_in2_WUSER;
output   m_axi_port_in2_ARVALID;
input   m_axi_port_in2_ARREADY;
output  [C_M_AXI_PORT_IN2_ADDR_WIDTH - 1:0] m_axi_port_in2_ARADDR;
output  [C_M_AXI_PORT_IN2_ID_WIDTH - 1:0] m_axi_port_in2_ARID;
output  [7:0] m_axi_port_in2_ARLEN;
output  [2:0] m_axi_port_in2_ARSIZE;
output  [1:0] m_axi_port_in2_ARBURST;
output  [1:0] m_axi_port_in2_ARLOCK;
output  [3:0] m_axi_port_in2_ARCACHE;
output  [2:0] m_axi_port_in2_ARPROT;
output  [3:0] m_axi_port_in2_ARQOS;
output  [3:0] m_axi_port_in2_ARREGION;
output  [C_M_AXI_PORT_IN2_ARUSER_WIDTH - 1:0] m_axi_port_in2_ARUSER;
input   m_axi_port_in2_RVALID;
output   m_axi_port_in2_RREADY;
input  [C_M_AXI_PORT_IN2_DATA_WIDTH - 1:0] m_axi_port_in2_RDATA;
input   m_axi_port_in2_RLAST;
input  [C_M_AXI_PORT_IN2_ID_WIDTH - 1:0] m_axi_port_in2_RID;
input  [C_M_AXI_PORT_IN2_RUSER_WIDTH - 1:0] m_axi_port_in2_RUSER;
input  [1:0] m_axi_port_in2_RRESP;
input   m_axi_port_in2_BVALID;
output   m_axi_port_in2_BREADY;
input  [1:0] m_axi_port_in2_BRESP;
input  [C_M_AXI_PORT_IN2_ID_WIDTH - 1:0] m_axi_port_in2_BID;
input  [C_M_AXI_PORT_IN2_BUSER_WIDTH - 1:0] m_axi_port_in2_BUSER;
output   m_axi_port_out_AWVALID;
input   m_axi_port_out_AWREADY;
output  [C_M_AXI_PORT_OUT_ADDR_WIDTH - 1:0] m_axi_port_out_AWADDR;
output  [C_M_AXI_PORT_OUT_ID_WIDTH - 1:0] m_axi_port_out_AWID;
output  [7:0] m_axi_port_out_AWLEN;
output  [2:0] m_axi_port_out_AWSIZE;
output  [1:0] m_axi_port_out_AWBURST;
output  [1:0] m_axi_port_out_AWLOCK;
output  [3:0] m_axi_port_out_AWCACHE;
output  [2:0] m_axi_port_out_AWPROT;
output  [3:0] m_axi_port_out_AWQOS;
output  [3:0] m_axi_port_out_AWREGION;
output  [C_M_AXI_PORT_OUT_AWUSER_WIDTH - 1:0] m_axi_port_out_AWUSER;
output   m_axi_port_out_WVALID;
input   m_axi_port_out_WREADY;
output  [C_M_AXI_PORT_OUT_DATA_WIDTH - 1:0] m_axi_port_out_WDATA;
output  [C_M_AXI_PORT_OUT_WSTRB_WIDTH - 1:0] m_axi_port_out_WSTRB;
output   m_axi_port_out_WLAST;
output  [C_M_AXI_PORT_OUT_ID_WIDTH - 1:0] m_axi_port_out_WID;
output  [C_M_AXI_PORT_OUT_WUSER_WIDTH - 1:0] m_axi_port_out_WUSER;
output   m_axi_port_out_ARVALID;
input   m_axi_port_out_ARREADY;
output  [C_M_AXI_PORT_OUT_ADDR_WIDTH - 1:0] m_axi_port_out_ARADDR;
output  [C_M_AXI_PORT_OUT_ID_WIDTH - 1:0] m_axi_port_out_ARID;
output  [7:0] m_axi_port_out_ARLEN;
output  [2:0] m_axi_port_out_ARSIZE;
output  [1:0] m_axi_port_out_ARBURST;
output  [1:0] m_axi_port_out_ARLOCK;
output  [3:0] m_axi_port_out_ARCACHE;
output  [2:0] m_axi_port_out_ARPROT;
output  [3:0] m_axi_port_out_ARQOS;
output  [3:0] m_axi_port_out_ARREGION;
output  [C_M_AXI_PORT_OUT_ARUSER_WIDTH - 1:0] m_axi_port_out_ARUSER;
input   m_axi_port_out_RVALID;
output   m_axi_port_out_RREADY;
input  [C_M_AXI_PORT_OUT_DATA_WIDTH - 1:0] m_axi_port_out_RDATA;
input   m_axi_port_out_RLAST;
input  [C_M_AXI_PORT_OUT_ID_WIDTH - 1:0] m_axi_port_out_RID;
input  [C_M_AXI_PORT_OUT_RUSER_WIDTH - 1:0] m_axi_port_out_RUSER;
input  [1:0] m_axi_port_out_RRESP;
input   m_axi_port_out_BVALID;
output   m_axi_port_out_BREADY;
input  [1:0] m_axi_port_out_BRESP;
input  [C_M_AXI_PORT_OUT_ID_WIDTH - 1:0] m_axi_port_out_BID;
input  [C_M_AXI_PORT_OUT_BUSER_WIDTH - 1:0] m_axi_port_out_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in1;
wire   [31:0] in2;
wire   [31:0] out_r;
reg    port_in1_blk_n_AR;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln74_fu_298_p2;
reg    port_in1_blk_n_R;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln77_fu_310_p2;
reg    port_in2_blk_n_AR;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln72_fu_256_p2;
reg    port_in2_blk_n_R;
reg    port_out_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    port_out_blk_n_W;
reg    port_out_blk_n_B;
wire    ap_CS_fsm_state22;
wire    port_in1_AWREADY;
wire    port_in1_WREADY;
reg    port_in1_ARVALID;
wire    port_in1_ARREADY;
wire    port_in1_RVALID;
reg    port_in1_RREADY;
wire   [31:0] port_in1_RDATA;
wire    port_in1_RLAST;
wire   [0:0] port_in1_RID;
wire   [0:0] port_in1_RUSER;
wire   [1:0] port_in1_RRESP;
wire    port_in1_BVALID;
wire   [1:0] port_in1_BRESP;
wire   [0:0] port_in1_BID;
wire   [0:0] port_in1_BUSER;
wire    port_in2_AWREADY;
wire    port_in2_WREADY;
reg    port_in2_ARVALID;
wire    port_in2_ARREADY;
wire    port_in2_RVALID;
reg    port_in2_RREADY;
wire   [31:0] port_in2_RDATA;
wire    port_in2_RLAST;
wire   [0:0] port_in2_RID;
wire   [0:0] port_in2_RUSER;
wire   [1:0] port_in2_RRESP;
wire    port_in2_BVALID;
wire   [1:0] port_in2_BRESP;
wire   [0:0] port_in2_BID;
wire   [0:0] port_in2_BUSER;
reg    port_out_AWVALID;
wire    port_out_AWREADY;
wire   [31:0] port_out_AWADDR;
reg    port_out_WVALID;
wire    port_out_WREADY;
wire    port_out_ARREADY;
wire    port_out_RVALID;
wire   [31:0] port_out_RDATA;
wire    port_out_RLAST;
wire   [0:0] port_out_RID;
wire   [0:0] port_out_RUSER;
wire   [1:0] port_out_RRESP;
wire    port_out_BVALID;
reg    port_out_BREADY;
wire   [1:0] port_out_BRESP;
wire   [0:0] port_out_BID;
wire   [0:0] port_out_BUSER;
reg   [29:0] out5_reg_332;
reg   [29:0] in_reg_337;
reg   [29:0] tmp_3_reg_342;
reg   [31:0] port_in2_addr_reg_353;
wire   [30:0] p_cast_fu_253_p1;
reg   [30:0] p_cast_reg_359;
wire   [9:0] i_fu_262_p2;
reg   [9:0] i_reg_367;
reg    ap_block_state3_io;
wire   [30:0] add_ln79_fu_284_p2;
reg   [30:0] add_ln79_reg_372;
reg   [31:0] port_in1_addr_reg_377;
wire    ap_CS_fsm_state9;
wire   [9:0] j_fu_304_p2;
reg   [9:0] j_reg_386;
reg    ap_block_state10_io;
wire   [9:0] k_fu_316_p2;
reg   [9:0] k_reg_394;
reg    ap_block_state17;
reg    ap_block_state17_io;
reg  signed [31:0] port_in1_addr_read_reg_399;
reg  signed [31:0] port_in2_addr_read_reg_404;
wire   [31:0] result_fu_326_p2;
wire    ap_CS_fsm_state18;
reg   [9:0] i_0_reg_158;
reg   [9:0] j_0_reg_169;
reg   [31:0] result_0_reg_180;
wire    ap_CS_fsm_state16;
reg   [9:0] k_0_reg_193;
wire   [63:0] empty_fu_234_p1;
wire   [63:0] empty_4_fu_244_p1;
wire   [63:0] zext_ln79_1_fu_289_p1;
wire   [8:0] trunc_ln79_fu_268_p1;
wire   [17:0] shl_ln_fu_272_p3;
wire   [30:0] zext_ln79_fu_280_p1;
wire   [31:0] mul_ln79_fu_322_p2;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
end

mmult_hw_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
mmult_hw_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in1(in1),
    .in2(in2),
    .out_r(out_r)
);

mmult_hw_port_in1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PORT_IN1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PORT_IN1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PORT_IN1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PORT_IN1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PORT_IN1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PORT_IN1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PORT_IN1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PORT_IN1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_PORT_IN1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PORT_IN1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PORT_IN1_CACHE_VALUE ))
mmult_hw_port_in1_m_axi_U(
    .AWVALID(m_axi_port_in1_AWVALID),
    .AWREADY(m_axi_port_in1_AWREADY),
    .AWADDR(m_axi_port_in1_AWADDR),
    .AWID(m_axi_port_in1_AWID),
    .AWLEN(m_axi_port_in1_AWLEN),
    .AWSIZE(m_axi_port_in1_AWSIZE),
    .AWBURST(m_axi_port_in1_AWBURST),
    .AWLOCK(m_axi_port_in1_AWLOCK),
    .AWCACHE(m_axi_port_in1_AWCACHE),
    .AWPROT(m_axi_port_in1_AWPROT),
    .AWQOS(m_axi_port_in1_AWQOS),
    .AWREGION(m_axi_port_in1_AWREGION),
    .AWUSER(m_axi_port_in1_AWUSER),
    .WVALID(m_axi_port_in1_WVALID),
    .WREADY(m_axi_port_in1_WREADY),
    .WDATA(m_axi_port_in1_WDATA),
    .WSTRB(m_axi_port_in1_WSTRB),
    .WLAST(m_axi_port_in1_WLAST),
    .WID(m_axi_port_in1_WID),
    .WUSER(m_axi_port_in1_WUSER),
    .ARVALID(m_axi_port_in1_ARVALID),
    .ARREADY(m_axi_port_in1_ARREADY),
    .ARADDR(m_axi_port_in1_ARADDR),
    .ARID(m_axi_port_in1_ARID),
    .ARLEN(m_axi_port_in1_ARLEN),
    .ARSIZE(m_axi_port_in1_ARSIZE),
    .ARBURST(m_axi_port_in1_ARBURST),
    .ARLOCK(m_axi_port_in1_ARLOCK),
    .ARCACHE(m_axi_port_in1_ARCACHE),
    .ARPROT(m_axi_port_in1_ARPROT),
    .ARQOS(m_axi_port_in1_ARQOS),
    .ARREGION(m_axi_port_in1_ARREGION),
    .ARUSER(m_axi_port_in1_ARUSER),
    .RVALID(m_axi_port_in1_RVALID),
    .RREADY(m_axi_port_in1_RREADY),
    .RDATA(m_axi_port_in1_RDATA),
    .RLAST(m_axi_port_in1_RLAST),
    .RID(m_axi_port_in1_RID),
    .RUSER(m_axi_port_in1_RUSER),
    .RRESP(m_axi_port_in1_RRESP),
    .BVALID(m_axi_port_in1_BVALID),
    .BREADY(m_axi_port_in1_BREADY),
    .BRESP(m_axi_port_in1_BRESP),
    .BID(m_axi_port_in1_BID),
    .BUSER(m_axi_port_in1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(port_in1_ARVALID),
    .I_ARREADY(port_in1_ARREADY),
    .I_ARADDR(port_in1_addr_reg_377),
    .I_ARID(1'd0),
    .I_ARLEN(32'd512),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(port_in1_RVALID),
    .I_RREADY(port_in1_RREADY),
    .I_RDATA(port_in1_RDATA),
    .I_RID(port_in1_RID),
    .I_RUSER(port_in1_RUSER),
    .I_RRESP(port_in1_RRESP),
    .I_RLAST(port_in1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(port_in1_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(port_in1_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(port_in1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(port_in1_BRESP),
    .I_BID(port_in1_BID),
    .I_BUSER(port_in1_BUSER)
);

mmult_hw_port_in2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PORT_IN2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PORT_IN2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PORT_IN2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PORT_IN2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PORT_IN2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PORT_IN2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PORT_IN2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PORT_IN2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_PORT_IN2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PORT_IN2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PORT_IN2_CACHE_VALUE ))
mmult_hw_port_in2_m_axi_U(
    .AWVALID(m_axi_port_in2_AWVALID),
    .AWREADY(m_axi_port_in2_AWREADY),
    .AWADDR(m_axi_port_in2_AWADDR),
    .AWID(m_axi_port_in2_AWID),
    .AWLEN(m_axi_port_in2_AWLEN),
    .AWSIZE(m_axi_port_in2_AWSIZE),
    .AWBURST(m_axi_port_in2_AWBURST),
    .AWLOCK(m_axi_port_in2_AWLOCK),
    .AWCACHE(m_axi_port_in2_AWCACHE),
    .AWPROT(m_axi_port_in2_AWPROT),
    .AWQOS(m_axi_port_in2_AWQOS),
    .AWREGION(m_axi_port_in2_AWREGION),
    .AWUSER(m_axi_port_in2_AWUSER),
    .WVALID(m_axi_port_in2_WVALID),
    .WREADY(m_axi_port_in2_WREADY),
    .WDATA(m_axi_port_in2_WDATA),
    .WSTRB(m_axi_port_in2_WSTRB),
    .WLAST(m_axi_port_in2_WLAST),
    .WID(m_axi_port_in2_WID),
    .WUSER(m_axi_port_in2_WUSER),
    .ARVALID(m_axi_port_in2_ARVALID),
    .ARREADY(m_axi_port_in2_ARREADY),
    .ARADDR(m_axi_port_in2_ARADDR),
    .ARID(m_axi_port_in2_ARID),
    .ARLEN(m_axi_port_in2_ARLEN),
    .ARSIZE(m_axi_port_in2_ARSIZE),
    .ARBURST(m_axi_port_in2_ARBURST),
    .ARLOCK(m_axi_port_in2_ARLOCK),
    .ARCACHE(m_axi_port_in2_ARCACHE),
    .ARPROT(m_axi_port_in2_ARPROT),
    .ARQOS(m_axi_port_in2_ARQOS),
    .ARREGION(m_axi_port_in2_ARREGION),
    .ARUSER(m_axi_port_in2_ARUSER),
    .RVALID(m_axi_port_in2_RVALID),
    .RREADY(m_axi_port_in2_RREADY),
    .RDATA(m_axi_port_in2_RDATA),
    .RLAST(m_axi_port_in2_RLAST),
    .RID(m_axi_port_in2_RID),
    .RUSER(m_axi_port_in2_RUSER),
    .RRESP(m_axi_port_in2_RRESP),
    .BVALID(m_axi_port_in2_BVALID),
    .BREADY(m_axi_port_in2_BREADY),
    .BRESP(m_axi_port_in2_BRESP),
    .BID(m_axi_port_in2_BID),
    .BUSER(m_axi_port_in2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(port_in2_ARVALID),
    .I_ARREADY(port_in2_ARREADY),
    .I_ARADDR(port_in2_addr_reg_353),
    .I_ARID(1'd0),
    .I_ARLEN(32'd262144),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(port_in2_RVALID),
    .I_RREADY(port_in2_RREADY),
    .I_RDATA(port_in2_RDATA),
    .I_RID(port_in2_RID),
    .I_RUSER(port_in2_RUSER),
    .I_RRESP(port_in2_RRESP),
    .I_RLAST(port_in2_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(port_in2_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(port_in2_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(port_in2_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(port_in2_BRESP),
    .I_BID(port_in2_BID),
    .I_BUSER(port_in2_BUSER)
);

mmult_hw_port_out_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PORT_OUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PORT_OUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PORT_OUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PORT_OUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PORT_OUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PORT_OUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PORT_OUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PORT_OUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_PORT_OUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PORT_OUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PORT_OUT_CACHE_VALUE ))
mmult_hw_port_out_m_axi_U(
    .AWVALID(m_axi_port_out_AWVALID),
    .AWREADY(m_axi_port_out_AWREADY),
    .AWADDR(m_axi_port_out_AWADDR),
    .AWID(m_axi_port_out_AWID),
    .AWLEN(m_axi_port_out_AWLEN),
    .AWSIZE(m_axi_port_out_AWSIZE),
    .AWBURST(m_axi_port_out_AWBURST),
    .AWLOCK(m_axi_port_out_AWLOCK),
    .AWCACHE(m_axi_port_out_AWCACHE),
    .AWPROT(m_axi_port_out_AWPROT),
    .AWQOS(m_axi_port_out_AWQOS),
    .AWREGION(m_axi_port_out_AWREGION),
    .AWUSER(m_axi_port_out_AWUSER),
    .WVALID(m_axi_port_out_WVALID),
    .WREADY(m_axi_port_out_WREADY),
    .WDATA(m_axi_port_out_WDATA),
    .WSTRB(m_axi_port_out_WSTRB),
    .WLAST(m_axi_port_out_WLAST),
    .WID(m_axi_port_out_WID),
    .WUSER(m_axi_port_out_WUSER),
    .ARVALID(m_axi_port_out_ARVALID),
    .ARREADY(m_axi_port_out_ARREADY),
    .ARADDR(m_axi_port_out_ARADDR),
    .ARID(m_axi_port_out_ARID),
    .ARLEN(m_axi_port_out_ARLEN),
    .ARSIZE(m_axi_port_out_ARSIZE),
    .ARBURST(m_axi_port_out_ARBURST),
    .ARLOCK(m_axi_port_out_ARLOCK),
    .ARCACHE(m_axi_port_out_ARCACHE),
    .ARPROT(m_axi_port_out_ARPROT),
    .ARQOS(m_axi_port_out_ARQOS),
    .ARREGION(m_axi_port_out_ARREGION),
    .ARUSER(m_axi_port_out_ARUSER),
    .RVALID(m_axi_port_out_RVALID),
    .RREADY(m_axi_port_out_RREADY),
    .RDATA(m_axi_port_out_RDATA),
    .RLAST(m_axi_port_out_RLAST),
    .RID(m_axi_port_out_RID),
    .RUSER(m_axi_port_out_RUSER),
    .RRESP(m_axi_port_out_RRESP),
    .BVALID(m_axi_port_out_BVALID),
    .BREADY(m_axi_port_out_BREADY),
    .BRESP(m_axi_port_out_BRESP),
    .BID(m_axi_port_out_BID),
    .BUSER(m_axi_port_out_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(port_out_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(port_out_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(port_out_RDATA),
    .I_RID(port_out_RID),
    .I_RUSER(port_out_RUSER),
    .I_RRESP(port_out_RRESP),
    .I_RLAST(port_out_RLAST),
    .I_AWVALID(port_out_AWVALID),
    .I_AWREADY(port_out_AWREADY),
    .I_AWADDR(port_out_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd262144),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(port_out_WVALID),
    .I_WREADY(port_out_WREADY),
    .I_WDATA(result_0_reg_180),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(port_out_BVALID),
    .I_BREADY(port_out_BREADY),
    .I_BRESP(port_out_BRESP),
    .I_BID(port_out_BID),
    .I_BUSER(port_out_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (icmp_ln74_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_0_reg_158 <= i_reg_367;
    end else if (((port_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_158 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (icmp_ln77_fu_310_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        j_0_reg_169 <= j_reg_386;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_169 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        k_0_reg_193 <= k_reg_394;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        k_0_reg_193 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        result_0_reg_180 <= result_fu_326_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        result_0_reg_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln72_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln79_reg_372 <= add_ln79_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_367 <= i_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_reg_337 <= {{in2[31:2]}};
        out5_reg_332 <= {{out_r[31:2]}};
        tmp_3_reg_342 <= {{in1[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        j_reg_386 <= j_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17))) begin
        k_reg_394 <= k_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((port_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_cast_reg_359[29 : 0] <= p_cast_fu_253_p1[29 : 0];
        port_in2_addr_reg_353[29 : 0] <= empty_4_fu_244_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (icmp_ln77_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        port_in1_addr_read_reg_399 <= port_in1_RDATA;
        port_in2_addr_read_reg_404 <= port_in2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        port_in1_addr_reg_377[30 : 0] <= zext_ln79_1_fu_289_p1[30 : 0];
    end
end

always @ (*) begin
    if (((port_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((port_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_io) & (icmp_ln74_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        port_in1_ARVALID = 1'b1;
    end else begin
        port_in1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (icmp_ln77_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        port_in1_RREADY = 1'b1;
    end else begin
        port_in1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        port_in1_blk_n_AR = m_axi_port_in1_ARREADY;
    end else begin
        port_in1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln77_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        port_in1_blk_n_R = m_axi_port_in1_RVALID;
    end else begin
        port_in1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln72_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        port_in2_ARVALID = 1'b1;
    end else begin
        port_in2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (icmp_ln77_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        port_in2_RREADY = 1'b1;
    end else begin
        port_in2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        port_in2_blk_n_AR = m_axi_port_in2_ARREADY;
    end else begin
        port_in2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln77_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        port_in2_blk_n_R = m_axi_port_in2_RVALID;
    end else begin
        port_in2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((port_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        port_out_AWVALID = 1'b1;
    end else begin
        port_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((port_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        port_out_BREADY = 1'b1;
    end else begin
        port_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (icmp_ln77_fu_310_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        port_out_WVALID = 1'b1;
    end else begin
        port_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        port_out_blk_n_AW = m_axi_port_out_AWREADY;
    end else begin
        port_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        port_out_blk_n_B = m_axi_port_out_BVALID;
    end else begin
        port_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln77_fu_310_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        port_out_blk_n_W = m_axi_port_out_WREADY;
    end else begin
        port_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((port_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (icmp_ln72_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if (((1'b0 == ap_block_state3_io) & (icmp_ln72_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_io) & (icmp_ln74_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b0 == ap_block_state10_io) & (icmp_ln74_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (icmp_ln77_fu_310_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((1'b1 == ap_block_state17_io) | ((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0))) & (icmp_ln77_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((port_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln79_fu_284_p2 = (p_cast_reg_359 + zext_ln79_fu_280_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_io = ((port_in1_ARREADY == 1'b0) & (icmp_ln74_fu_298_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state17 = (((port_in2_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)) | ((port_in1_RVALID == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_io = ((port_out_WREADY == 1'b0) & (icmp_ln77_fu_310_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state3_io = ((port_in2_ARREADY == 1'b0) & (icmp_ln72_fu_256_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_4_fu_244_p1 = in_reg_337;

assign empty_fu_234_p1 = out5_reg_332;

assign i_fu_262_p2 = (i_0_reg_158 + 10'd1);

assign icmp_ln72_fu_256_p2 = ((i_0_reg_158 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_298_p2 = ((j_0_reg_169 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_310_p2 = ((k_0_reg_193 == 10'd512) ? 1'b1 : 1'b0);

assign j_fu_304_p2 = (j_0_reg_169 + 10'd1);

assign k_fu_316_p2 = (k_0_reg_193 + 10'd1);

assign mul_ln79_fu_322_p2 = ($signed(port_in1_addr_read_reg_399) * $signed(port_in2_addr_read_reg_404));

assign p_cast_fu_253_p1 = tmp_3_reg_342;

assign port_out_AWADDR = empty_fu_234_p1;

assign result_fu_326_p2 = (mul_ln79_fu_322_p2 + result_0_reg_180);

assign shl_ln_fu_272_p3 = {{trunc_ln79_fu_268_p1}, {9'd0}};

assign trunc_ln79_fu_268_p1 = i_0_reg_158[8:0];

assign zext_ln79_1_fu_289_p1 = add_ln79_reg_372;

assign zext_ln79_fu_280_p1 = shl_ln_fu_272_p3;

always @ (posedge ap_clk) begin
    port_in2_addr_reg_353[31:30] <= 2'b00;
    p_cast_reg_359[30] <= 1'b0;
    port_in1_addr_reg_377[31] <= 1'b0;
end

endmodule //mmult_hw
